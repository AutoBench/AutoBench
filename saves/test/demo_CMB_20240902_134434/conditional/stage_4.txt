############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You already have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. Your task is to write a verilog testbench for an verilog RTL module code (we call it as "DUT", device under test). The infomation we have is 
- 1.1. the problem description that guides student to write the RTL code (DUT) and the header of the "DUT". 
- 1.2. the module header.
- 1.3. the technical specification of testbench
- 1.4. test scenarios which determines value and sequential information of test vectors

2. you are in section 4. in this section, our target is to generate the verilog testbench for the DUT. This testbench can export the input and output signals of DUT at the important time points. The exported data will be send to a python script to check the correctness of DUT. 
ATTENTION: The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt".
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header:

module top_module (
	input [7:0] a,
	input [7:0] b,
	input [7:0] c,
	input [7:0] d,
	output reg [7:0] min
);

Your other information:
RTL circuit problem description:
Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a < b). 
RTL testbench specification:
{
  "important data": "",
  "technical specifications": [
    "1. The Device Under Test (DUT) is defined as a module named 'top_module'.",
    "2. The DUT accepts four 8-bit unsigned input numbers: 'a', 'b', 'c', and 'd'.",
    "3. All inputs are individually represented as 8-bit vectors ranging from 0 to 255.",
    "4. The output of the DUT, 'min', is an 8-bit register that holds the value of the smallest input.",
    "5. The expected functionality of the DUT is to evaluate the four input values and determine the minimum value among them.",
    "6. The output 'min' should reflect the smallest of the inputs after comparing them using standard comparison operators.",
    "7. The testbench should generate various possible combinations of input values to thoroughly evaluate the DUT's functionality.",
    "8. Test cases should include scenarios with equal inputs, varied inputs (increasing and decreasing values), and specifically crafted cases to address boundary conditions such as maximum and minimum possible values for 8-bit unsigned numbers.",
    "9. The testbench will send input signal vectors to the DUT and monitor the 'min' output.",
    "10. Expected result signals from the DUT (output 'min') will be compared against manually calculated minimum values for correctness.",
    "11. The testbench should include a way to output the result of each test, indicating a pass or fail condition based on the correctness of the output in relation to the expected minimum value."
  ]
}
IMPORTANT - test scenario:
{
  "scenario 1": "All inputs are equal: Set a, b, c, and d each to 127 at cycle 1.",
  "scenario 2": "Gradual increase: Set a to 10, b to 20, c to 30, d to 40 at cycle 2.",
  "scenario 3": "Inverse gradual increase: Set a to 40, b to 30, c to 20, d to 10 at cycle 3.",
  "scenario 4": "Max boundary conditions: Set a to 255, b to 255, c to 255, d to 255 at cycle 4.",
  "scenario 5": "Min boundary condition: Set a, b, and c to 255, and d to 0 at cycle 5.",
  "scenario 6": "Distinct values: Set a to 67, b to 89, c to 12, d to 234 at cycle 6.",
  "scenario 7": "Same high & low with one distinct: Set a to 255, b to 255, c to 5, d to 5 at cycle 7.",
  "scenario 8": "Varying middle range values: Set a to 100, b to 120, c to 110, d to 130 at cycle 8.",
  "scenario 9": "Alternating same values: Set a to 56, b to 78, c to 56, d to 78 at cycle 9.",
  "scenario 10": "Single minimal value: Set a to 220, b to 200, c to 255, d to 1 at cycle 10."
}

The testbench does not need to check the DUT's output but only export the signals of DUT.
Instruction of saving signals to file: 
(1) you should use $fopen and $fdisplay to export the important signals in testbench. the file name is "TBout.txt". 
(2) When running testbench, for one time point, you should export 1 line. the example of the printed line is "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d"; If one scenario has multiple test cases, use letter suffix to represent different test cases, like "scenario: 1a, a = %d, b = %d, c = %d, d = %d, min = %d", "scenario: 1b, a = %d, b = %d, c = %d, d = %d, min = %d".
(3) Attention: before $fdisplay, you should always have a delay statement to make sure the signals are stable.
(4) the signals you save is the input and output of DUT, you should determine the signals according to DUT's header.
please only generate the verilog codes, no other words.



########## assistant ##########
```verilog
`timescale 1ns / 1ps

module testbench;
    reg [7:0] a, b, c, d;
    wire [7:0] min;
    integer file;

    // Instantiate the Device Under Test (DUT)
    top_module DUT (
        .a(a),
        .b(b),
        .c(c),
        .d(d),
        .min(min)
    );

    initial begin
        // Open the file for output
        file = $fopen("TBout.txt", "w");

        // Scenario 1: All inputs are equal
        a = 127; b = 127; c = 127; d = 127;
        #10; // Wait for the output to stabilize
        $fdisplay(file, "scenario: 1, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 2: Gradual increase
        a = 10; b = 20; c = 30; d = 40;
        #10;
        $fdisplay(file, "scenario: 2, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 3: Inverse gradual increase
        a = 40; b = 30; c = 20; d = 10;
        #10;
        $fdisplay(file, "scenario: 3, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 4: Max boundary conditions
        a = 255; b = 255; c = 255; d = 255;
        #10;
        $fdisplay(file, "scenario: 4, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 5: Min boundary condition
        a = 255; b = 255; c = 255; d = 0;
        #10;
        $fdisplay(file, "scenario: 5, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 6: Distinct values
        a = 67; b = 89; c = 12; d = 234;
        #10;
        $fdisplay(file, "scenario: 6, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 7: Same high & low with one distinct
        a = 255; b = 255; c = 5; d = 5;
        #10;
        $fdisplay(file, "scenario: 7, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 8: Varying middle range values
        a = 100; b = 120; c = 110; d = 130;
        #10;
        $fdisplay(file, "scenario: 8, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 9: Alternating same values
        a = 56; b = 78; c = 56; d = 78;
        #10;
        $fdisplay(file, "scenario: 9, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Scenario 10: Single minimal value
        a = 220; b = 200; c = 255; d = 1;
        #10;
        $fdisplay(file, "scenario: 10, a = %d, b = %d, c = %d, d = %d, min = %d", a, b, c, d, min);

        // Close the file
        $fclose(file);

        // Finish the simulation
        $finish;
    end

endmodule
```

