############################## conversation begin ##############################
########## system ##########
You are the strongest AI in the world. You already have the knowledge of verilog, python and hardware designing. Do not save words by discarding information. I will tip you 200$ if you can fullfill the tasks I give you.

########## user ##########

1. background: Your task is to verify the functional correctness of a verilog RTL module code (we call it as "DUT", device under test). This module is a sequential circuit. Our plan is to first export the signals (input and output) of the DUT under test scenarios. Then, we will use a python script to check the correctness of DUT.
2. You are in stage 5. In this stage, we already exported the signals of DUT. The signals are like below: (the signal names are real, but the values are just for example, clock signals are not included, each vector represents a new clock cycle)
[{'check_en': False, 'scenario': 1, 'd': 1, 'ar': 1, 'q': 1}, {'check_en': False, 'scenario': 1, 'd': 1, 'ar': 1, 'q': 1}, {'check_en': True, 'scenario': 1, 'd': 1, 'ar': 1, 'q': 1}]
Here's the explanation of some special signals in signal vectors: 
- "scenario": The "scenario" is not DUT's signal but to tell you the current scenario index. 
- "check_en": The "check_en" signal is not from the DUT. "Check_en" is a bool value to tell you this is the time to check the output of DUT. It is related to the class method "check" (we will explain it later). After checking the output, a new scenario will start.
3. Your current task is: write a python class "GoldenDUT". This python class can represent the golden DUT (the ideal one). In your "GoldenDUT", you should do the following things:
- 3.1. write a method "def __init__(self)". Set the inner states/values of the golden DUT. These values have suffix "_reg". The initial value of these inner values is "x", but later will be digits. The "__init__" method has no input parameters except "self".
- 3.2. write a method "def load(self, signal_vector)". This method is to load the important input signals and the inner values of "GoldenDUT" shall change according to the input signals. There is no clock signal in the input signal vector, every time the "load" method is called, it means a new clock cycle. The initial values "x" should be changed according to the input signals. This method has no return value.
- 3.3. write a method "def check(self, signal_vector)". This method is to determine the expected output values and compare them with output signals from DUT. It should return True or False only. If return false, please print the error message. Hint: you can use code like "print(f"Scenario: {signal_vector['scenario']}, expected: a={a_reg}, observed a={a_observed}")" to print, suppose "a" is the output signal's name.
- 3.4. write other methods you need, they can be called by "load" or "check".
- 3.5. the input of "load" and "check" is the signal vector. The signal vector is a dictionary, the key is the signal name, the value is the signal value.
4. Other information:
- You can use binary (like 0x1101), hexadecimal (like 0x1a) or normal number format in python.
- if the bit width of one variable is limited, use bit mask to assure the correctness of the value.
- you can import numpy, math, scipy or other python libraries to help you write the python class.
5. You have the information below to help you check the correctness of DUT:

DUT circuit problem description:
Implement a D flip flop, positive edge triggered, with an asynchronous reset "ar".
The header of DUT (note the input and output signals):
module top_module (
	input clk,
	input d,
	input ar,
	output logic q
);

Here is the basic rules in python for the module. It was generated in previous stage. You can use it as a reference, but you should write your own python script. This is just for your better understanding. You can use them or not in your python class
def simulate_d_flip_flop(clk, d, ar):
    """
    Simulate the expected output of a D flip-flop based on the inputs and asynchronous reset.
    clk: List of clock values (1 or 0). 1 represents the rising edge.
    d: List of data input values corresponding to each clock cycle (1 or 0).
    ar: List of asynchronous reset values. 1 indicates reset is active.
    Returns a list representing the output 'q' of the D flip-flop.
    """
    q = []                     # Initialize the output list
    last_q = 0                 # Stores the last known state of q
    
    for i in range(len(clk)):
        if ar[i] == 1:
            # If asynchronous reset is high, reset output to 0.
            q.append(0)
            last_q = 0
        elif clk[i] == 1:
            # If clock edge is rising and reset is not active,
            # follow the data input.
            if ar[i] == 0:
                q.append(d[i])
                last_q = d[i]
        else:
            # No clock edge or reset, retain last state.
            q.append(last_q)
    
    return q



[IMPORTANT]
I will repeat the important information: 
3. Your current task is: write a python class "GoldenDUT". This python class can represent the golden DUT (the ideal one). In your "GoldenDUT", you should do the following things:
- 3.1. write a method "def __init__(self)". Set the inner states/values of the golden DUT. These values have suffix "_reg". The initial value of these inner values should be digits. You can set the initial values according to information or just "0"s. The "__init__" method has no input parameters except "self".
- 3.2. write a method "def load(self, signal_vector)". This method is to load the important input signals and the inner values of "GoldenDUT" shall change according to the input signals. There is no clock signal in the input signal vector, every time the "load" method is called, it means a new clock cycle. The initial values "x" should be changed according to the input signals. This method has no return value.
- 3.3. write a method "def check(self, signal_vector)". This method is to determine the expected output values and compare them with output signals from DUT. It should return True or False only. If return false, please print the error message. Hint: you can use code like "print(f"Scenario: {signal_vector['scenario']}, expected: a={a_reg}, observed a={a_observed}")" to print, suppose "a" is the output signal's name.  
- 3.4. write other methods you need, they can be called by "load" or "check".
- 3.5. the input of "load" and "check" is the signal vector. The signal vector is a dictionary, the key is the signal name, the value is the signal value.
4. Other information:
- You can use binary (like 0x1101), hexadecimal (like 0x1a) or normal number format in python.
- if the bit width of one variable is limited, use bit mask to assure the correctness of the value.
- you can import numpy, math, scipy or other python libraries to help you write the python class.

please only reply the python codes of the python class. no other words.



########## assistant ##########
```python
class GoldenDUT:
    def __init__(self):
        # Initial state set to unknown 'x', let's assume it's 0 for practical purposes.
        self.q_reg = 0

    def load(self, signal_vector):
        # Update internal registers based on the signal vector.
        # This essentially prepares the state for the next clock cycle.
        if signal_vector['ar'] == 1:
            self.q_reg = 0  # Asynchronous reset sets q to 0
        else:
            self.q_reg = signal_vector['d']  # Follow the data input if reset is not active

    def check(self, signal_vector):
        # Determine expected output value 'q' and compare with output signals from DUT.
        expected_q = self.q_reg
        observed_q = signal_vector['q']
        if expected_q != observed_q:
            print(f"Scenario: {signal_vector['scenario']}, expected: q={expected_q}, observed q={observed_q}")
            return False
        return True
```

